{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mac/Desktop/Dex/dexStarter/dex/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/mac/Desktop/Dex/dexStarter/dex/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"/Users/mac/Desktop/Dex/dexStarter/dex/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/mac/Desktop/Dex/dexStarter/dex/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/mac/Desktop/Dex/dexStarter/dex/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/mac/Desktop/Dex/dexStarter/dex/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/mac/Desktop/Dex/dexStarter/dex/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { defaultLogger } from './logger.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { Removable } from './removable.mjs';\nimport { createRetryer, canFetch } from './retryer.mjs';\n\n// CLASS\nvar Mutation = /*#__PURE__*/function (_Removable) {\n  _inherits(Mutation, _Removable);\n  var _super = _createSuper(Mutation);\n  function Mutation(config) {\n    var _this;\n    _classCallCheck(this, Mutation);\n    _this = _super.call(this);\n    _this.options = _objectSpread(_objectSpread({}, config.defaultOptions), config.options);\n    _this.mutationId = config.mutationId;\n    _this.mutationCache = config.mutationCache;\n    _this.logger = config.logger || defaultLogger;\n    _this.observers = [];\n    _this.state = config.state || getDefaultState();\n    _this.updateCacheTime(_this.options.cacheTime);\n    _this.scheduleGc();\n    return _this;\n  }\n  _createClass(Mutation, [{\n    key: \"meta\",\n    get: function get() {\n      return this.options.meta;\n    }\n  }, {\n    key: \"setState\",\n    value: function setState(state) {\n      this.dispatch({\n        type: 'setState',\n        state: state\n      });\n    }\n  }, {\n    key: \"addObserver\",\n    value: function addObserver(observer) {\n      if (this.observers.indexOf(observer) === -1) {\n        this.observers.push(observer); // Stop the mutation from being garbage collected\n\n        this.clearGcTimeout();\n        this.mutationCache.notify({\n          type: 'observerAdded',\n          mutation: this,\n          observer: observer\n        });\n      }\n    }\n  }, {\n    key: \"removeObserver\",\n    value: function removeObserver(observer) {\n      this.observers = this.observers.filter(function (x) {\n        return x !== observer;\n      });\n      this.scheduleGc();\n      this.mutationCache.notify({\n        type: 'observerRemoved',\n        mutation: this,\n        observer: observer\n      });\n    }\n  }, {\n    key: \"optionalRemove\",\n    value: function optionalRemove() {\n      if (!this.observers.length) {\n        if (this.state.status === 'loading') {\n          this.scheduleGc();\n        } else {\n          this.mutationCache.remove(this);\n        }\n      }\n    }\n  }, {\n    key: \"continue\",\n    value: function _continue() {\n      if (this.retryer) {\n        this.retryer.continue();\n        return this.retryer.promise;\n      }\n      return this.execute();\n    }\n  }, {\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _this2 = this;\n        var executeMutation, restored, _this$mutationCache$c3, _this$mutationCache$c4, _this$options$onSucce, _this$options2, _this$options$onSettl, _this$options3, _this$mutationCache$c, _this$mutationCache$c2, _this$options$onMutat, _this$options, context, data, _this$mutationCache$c5, _this$mutationCache$c6, _this$options$onError, _this$options4, _this$options$onSettl2, _this$options5;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              executeMutation = function executeMutation() {\n                var _this$options$retry;\n                _this2.retryer = createRetryer({\n                  fn: function fn() {\n                    if (!_this2.options.mutationFn) {\n                      return Promise.reject('No mutationFn found');\n                    }\n                    return _this2.options.mutationFn(_this2.state.variables);\n                  },\n                  onFail: function onFail(failureCount, error) {\n                    _this2.dispatch({\n                      type: 'failed',\n                      failureCount: failureCount,\n                      error: error\n                    });\n                  },\n                  onPause: function onPause() {\n                    _this2.dispatch({\n                      type: 'pause'\n                    });\n                  },\n                  onContinue: function onContinue() {\n                    _this2.dispatch({\n                      type: 'continue'\n                    });\n                  },\n                  retry: (_this$options$retry = _this2.options.retry) != null ? _this$options$retry : 0,\n                  retryDelay: _this2.options.retryDelay,\n                  networkMode: _this2.options.networkMode\n                });\n                return _this2.retryer.promise;\n              };\n              restored = this.state.status === 'loading';\n              _context.prev = 2;\n              if (restored) {\n                _context.next = 11;\n                break;\n              }\n              this.dispatch({\n                type: 'loading',\n                variables: this.options.variables\n              }); // Notify cache callback\n              _context.next = 7;\n              return (_this$mutationCache$c = (_this$mutationCache$c2 = this.mutationCache.config).onMutate) == null ? void 0 : _this$mutationCache$c.call(_this$mutationCache$c2, this.state.variables, this);\n            case 7:\n              _context.next = 9;\n              return (_this$options$onMutat = (_this$options = this.options).onMutate) == null ? void 0 : _this$options$onMutat.call(_this$options, this.state.variables);\n            case 9:\n              context = _context.sent;\n              if (context !== this.state.context) {\n                this.dispatch({\n                  type: 'loading',\n                  context: context,\n                  variables: this.state.variables\n                });\n              }\n            case 11:\n              _context.next = 13;\n              return executeMutation();\n            case 13:\n              data = _context.sent;\n              _context.next = 16;\n              return (_this$mutationCache$c3 = (_this$mutationCache$c4 = this.mutationCache.config).onSuccess) == null ? void 0 : _this$mutationCache$c3.call(_this$mutationCache$c4, data, this.state.variables, this.state.context, this);\n            case 16:\n              _context.next = 18;\n              return (_this$options$onSucce = (_this$options2 = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options2, data, this.state.variables, this.state.context);\n            case 18:\n              _context.next = 20;\n              return (_this$options$onSettl = (_this$options3 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options3, data, null, this.state.variables, this.state.context);\n            case 20:\n              this.dispatch({\n                type: 'success',\n                data: data\n              });\n              return _context.abrupt(\"return\", data);\n            case 24:\n              _context.prev = 24;\n              _context.t0 = _context[\"catch\"](2);\n              _context.prev = 26;\n              _context.next = 29;\n              return (_this$mutationCache$c5 = (_this$mutationCache$c6 = this.mutationCache.config).onError) == null ? void 0 : _this$mutationCache$c5.call(_this$mutationCache$c6, _context.t0, this.state.variables, this.state.context, this);\n            case 29:\n              if (process.env.NODE_ENV !== 'production') {\n                this.logger.error(_context.t0);\n              }\n              _context.next = 32;\n              return (_this$options$onError = (_this$options4 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options4, _context.t0, this.state.variables, this.state.context);\n            case 32:\n              _context.next = 34;\n              return (_this$options$onSettl2 = (_this$options5 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options5, undefined, _context.t0, this.state.variables, this.state.context);\n            case 34:\n              throw _context.t0;\n            case 35:\n              _context.prev = 35;\n              this.dispatch({\n                type: 'error',\n                error: _context.t0\n              });\n              return _context.finish(35);\n            case 38:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[2, 24], [26,, 35, 38]]);\n      }));\n      function execute() {\n        return _execute.apply(this, arguments);\n      }\n      return execute;\n    }()\n  }, {\n    key: \"dispatch\",\n    value: function dispatch(action) {\n      var _this3 = this;\n      var reducer = function reducer(state) {\n        switch (action.type) {\n          case 'failed':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              failureCount: action.failureCount,\n              failureReason: action.error\n            });\n          case 'pause':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              isPaused: true\n            });\n          case 'continue':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              isPaused: false\n            });\n          case 'loading':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              context: action.context,\n              data: undefined,\n              failureCount: 0,\n              failureReason: null,\n              error: null,\n              isPaused: !canFetch(_this3.options.networkMode),\n              status: 'loading',\n              variables: action.variables\n            });\n          case 'success':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              data: action.data,\n              failureCount: 0,\n              failureReason: null,\n              error: null,\n              status: 'success',\n              isPaused: false\n            });\n          case 'error':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              data: undefined,\n              error: action.error,\n              failureCount: state.failureCount + 1,\n              failureReason: action.error,\n              isPaused: false,\n              status: 'error'\n            });\n          case 'setState':\n            return _objectSpread(_objectSpread({}, state), action.state);\n        }\n      };\n      this.state = reducer(this.state);\n      notifyManager.batch(function () {\n        _this3.observers.forEach(function (observer) {\n          observer.onMutationUpdate(action);\n        });\n        _this3.mutationCache.notify({\n          mutation: _this3,\n          type: 'updated',\n          action: action\n        });\n      });\n    }\n  }]);\n  return Mutation;\n}(Removable);\nfunction getDefaultState() {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined\n  };\n}\nexport { Mutation, getDefaultState };","map":{"version":3,"mappings":"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","names":["Mutation","constructor","config","options","defaultOptions","mutationId","mutationCache","logger","defaultLogger","observers","state","getDefaultState","updateCacheTime","cacheTime","scheduleGc","meta","setState","dispatch","type","addObserver","observer","indexOf","push","clearGcTimeout","notify","mutation","removeObserver","filter","x","optionalRemove","length","status","remove","continue","retryer","promise","execute","executeMutation","createRetryer","fn","mutationFn","Promise","reject","variables","onFail","failureCount","error","onPause","onContinue","retry","retryDelay","networkMode","restored","onMutate","_this$mutationCache$c","context","data","onSuccess","_this$mutationCache$c3","_this$options$onSucce","onSettled","onError","_this$mutationCache$c5","process","env","NODE_ENV","_this$options$onError","undefined","action","reducer","failureReason","isPaused","canFetch","notifyManager","batch","forEach","onMutationUpdate","Removable"],"sources":["/Users/mac/Desktop/Dex/dexStarter/dex/node_modules/@tanstack/query-core/src/mutation.ts"],"sourcesContent":["import type { MutationOptions, MutationStatus, MutationMeta } from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport type { Logger } from './logger'\nimport { defaultLogger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport { Removable } from './removable'\nimport type { Retryer } from './retryer'\nimport { canFetch, createRetryer } from './retryer'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  logger?: Logger\n  defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n  meta?: MutationMeta\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  failureReason: TError | null\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError | null\n}\n\ninterface LoadingAction<TVariables, TContext> {\n  type: 'loading'\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError, TVariables, TContext> {\n  type: 'setState'\n  state: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | LoadingAction<TVariables, TContext>\n  | PauseAction\n  | SetStateAction<TData, TError, TVariables, TContext>\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> extends Removable {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  mutationId: number\n\n  private observers: MutationObserver<TData, TError, TVariables, TContext>[]\n  private mutationCache: MutationCache\n  private logger: Logger\n  private retryer?: Retryer<TData>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    super()\n\n    this.options = {\n      ...config.defaultOptions,\n      ...config.options,\n    }\n    this.mutationId = config.mutationId\n    this.mutationCache = config.mutationCache\n    this.logger = config.logger || defaultLogger\n    this.observers = []\n    this.state = config.state || getDefaultState()\n\n    this.updateCacheTime(this.options.cacheTime)\n    this.scheduleGc()\n  }\n\n  get meta(): MutationMeta | undefined {\n    return this.options.meta\n  }\n\n  setState(state: MutationState<TData, TError, TVariables, TContext>): void {\n    this.dispatch({ type: 'setState', state })\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n\n      // Stop the mutation from being garbage collected\n      this.clearGcTimeout()\n\n      this.mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer,\n      })\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.observers = this.observers.filter((x) => x !== observer)\n\n    this.scheduleGc()\n\n    this.mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer,\n    })\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length) {\n      if (this.state.status === 'loading') {\n        this.scheduleGc()\n      } else {\n        this.mutationCache.remove(this)\n      }\n    }\n  }\n\n  continue(): Promise<TData> {\n    if (this.retryer) {\n      this.retryer.continue()\n      return this.retryer.promise\n    }\n    return this.execute()\n  }\n\n  async execute(): Promise<TData> {\n    const executeMutation = () => {\n      this.retryer = createRetryer({\n        fn: () => {\n          if (!this.options.mutationFn) {\n            return Promise.reject('No mutationFn found')\n          }\n          return this.options.mutationFn(this.state.variables!)\n        },\n        onFail: (failureCount, error) => {\n          this.dispatch({ type: 'failed', failureCount, error })\n        },\n        onPause: () => {\n          this.dispatch({ type: 'pause' })\n        },\n        onContinue: () => {\n          this.dispatch({ type: 'continue' })\n        },\n        retry: this.options.retry ?? 0,\n        retryDelay: this.options.retryDelay,\n        networkMode: this.options.networkMode,\n      })\n\n      return this.retryer.promise\n    }\n\n    const restored = this.state.status === 'loading'\n    try {\n      if (!restored) {\n        this.dispatch({ type: 'loading', variables: this.options.variables! })\n        // Notify cache callback\n        await this.mutationCache.config.onMutate?.(\n          this.state.variables,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n        const context = await this.options.onMutate?.(this.state.variables!)\n        if (context !== this.state.context) {\n          this.dispatch({\n            type: 'loading',\n            context,\n            variables: this.state.variables,\n          })\n        }\n      }\n      const data = await executeMutation()\n\n      // Notify cache callback\n      await this.mutationCache.config.onSuccess?.(\n        data,\n        this.state.variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSuccess?.(\n        data,\n        this.state.variables!,\n        this.state.context!,\n      )\n\n      await this.options.onSettled?.(\n        data,\n        null,\n        this.state.variables!,\n        this.state.context,\n      )\n\n      this.dispatch({ type: 'success', data })\n      return data\n    } catch (error) {\n      try {\n        // Notify cache callback\n        await this.mutationCache.config.onError?.(\n          error,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error)\n        }\n\n        await this.options.onError?.(\n          error as TError,\n          this.state.variables!,\n          this.state.context,\n        )\n\n        await this.options.onSettled?.(\n          undefined,\n          error as TError,\n          this.state.variables!,\n          this.state.context,\n        )\n        throw error\n      } finally {\n        this.dispatch({ type: 'error', error: error as TError })\n      }\n    }\n  }\n\n  private dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    const reducer = (\n      state: MutationState<TData, TError, TVariables, TContext>,\n    ): MutationState<TData, TError, TVariables, TContext> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            failureCount: action.failureCount,\n            failureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            isPaused: true,\n          }\n        case 'continue':\n          return {\n            ...state,\n            isPaused: false,\n          }\n        case 'loading':\n          return {\n            ...state,\n            context: action.context,\n            data: undefined,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            isPaused: !canFetch(this.options.networkMode),\n            status: 'loading',\n            variables: action.variables,\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            status: 'success',\n            isPaused: false,\n          }\n        case 'error':\n          return {\n            ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            failureReason: action.error,\n            isPaused: false,\n            status: 'error',\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach((observer) => {\n        observer.onMutationUpdate(action)\n      })\n      this.mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action,\n      })\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext,\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}