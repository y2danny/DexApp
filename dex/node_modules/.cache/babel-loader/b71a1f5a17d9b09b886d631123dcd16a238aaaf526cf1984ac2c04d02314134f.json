{"ast":null,"code":"import * as React from 'react';\nimport { hydrate } from '@tanstack/query-core';\nimport { useQueryClient } from './QueryClientProvider.mjs';\nfunction useHydrate(state) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var queryClient = useQueryClient({\n    context: options.context\n  });\n  var optionsRef = React.useRef(options);\n  optionsRef.current = options; // Running hydrate again with the same queries is safe,\n  // it wont overwrite or initialize existing queries,\n  // relying on useMemo here is only a performance optimization.\n  // hydrate can and should be run *during* render here for SSR to work properly\n\n  React.useMemo(function () {\n    if (state) {\n      hydrate(queryClient, state, optionsRef.current);\n    }\n  }, [queryClient, state]);\n}\nvar Hydrate = function Hydrate(_ref) {\n  var children = _ref.children,\n    options = _ref.options,\n    state = _ref.state;\n  useHydrate(state, options);\n  return children;\n};\nexport { Hydrate, useHydrate };","map":{"version":3,"mappings":";;;AAOO,SAASA,UAAT,CACLC,KADK,EAGL;EAAA,IADAC,OAAwC,uEAAG,EAFtC;EAIL,IAAMC,WAAW,GAAGC,cAAc,CAAC;IAAEC,OAAO,EAAEH,OAAO,CAACG;EAAnB,CAAD,CAAlC;EAEA,IAAMC,UAAU,GAAGC,KAAK,CAACC,MAAN,CAAaN,OAAb,CAAnB;EACAI,UAAU,CAACG,OAAX,GAAqBP,OAArB,CAJA;EAOA;EACA;EACA;;EACAK,KAAK,CAACG,OAAN,CAAc,YAAM;IAClB,IAAIT,KAAJ,EAAW;MACTU,OAAO,CAACR,WAAD,EAAcF,KAAd,EAAqBK,UAAU,CAACG,OAAhC,CAAP;IACD;EACF,CAJD,EAIG,CAACN,WAAD,EAAcF,KAAd,CAJH;AAKD;AAQM,IAAMW,OAAO,GAAG,SAAVA,OAAO,OAAmD;EAAA,IAA7CC,QAAF,QAAEA,QAAF;IAAYX,OAAZ,QAAYA,OAAZ;IAAqBD;EAC3CD,UAAU,CAACC,KAAD,EAAQC,OAAR,CAAV;EACA,OAAOW,QAAP;AACD","names":["useHydrate","state","options","queryClient","useQueryClient","context","optionsRef","React","useRef","current","useMemo","hydrate","Hydrate","children"],"sources":["/Users/mac/Desktop/Dex/dexStarter/dex/node_modules/@tanstack/react-query/src/Hydrate.tsx"],"sourcesContent":["import * as React from 'react'\n\nimport type { HydrateOptions } from '@tanstack/query-core'\nimport { hydrate } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type { ContextOptions } from './types'\n\nexport function useHydrate(\n  state: unknown,\n  options: HydrateOptions & ContextOptions = {},\n) {\n  const queryClient = useQueryClient({ context: options.context })\n\n  const optionsRef = React.useRef(options)\n  optionsRef.current = options\n\n  // Running hydrate again with the same queries is safe,\n  // it wont overwrite or initialize existing queries,\n  // relying on useMemo here is only a performance optimization.\n  // hydrate can and should be run *during* render here for SSR to work properly\n  React.useMemo(() => {\n    if (state) {\n      hydrate(queryClient, state, optionsRef.current)\n    }\n  }, [queryClient, state])\n}\n\nexport interface HydrateProps {\n  state?: unknown\n  options?: HydrateOptions\n  children?: React.ReactNode\n}\n\nexport const Hydrate = ({ children, options, state }: HydrateProps) => {\n  useHydrate(state, options)\n  return children as React.ReactElement\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}