{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mac/Desktop/Dex/dexStarter/dex/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/mac/Desktop/Dex/dexStarter/dex/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { hydrate, dehydrate } from '@tanstack/query-core';\n\n/**\n * Restores persisted data to the QueryCache\n *  - data obtained from persister.restoreClient\n *  - data is hydrated using hydrateOptions\n * If data is expired, busted, empty, or throws, it runs persister.removeClient\n */\nfunction persistQueryClientRestore(_x) {\n  return _persistQueryClientRestore.apply(this, arguments);\n}\n/**\n * Persists data from the QueryCache\n *  - data dehydrated using dehydrateOptions\n *  - data is persisted using persister.persistClient\n */\nfunction _persistQueryClientRestore() {\n  _persistQueryClientRestore = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {\n    var queryClient, persister, _ref$maxAge, maxAge, _ref$buster, buster, hydrateOptions, persistedClient, expired, busted;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          queryClient = _ref.queryClient, persister = _ref.persister, _ref$maxAge = _ref.maxAge, maxAge = _ref$maxAge === void 0 ? 1000 * 60 * 60 * 24 : _ref$maxAge, _ref$buster = _ref.buster, buster = _ref$buster === void 0 ? '' : _ref$buster, hydrateOptions = _ref.hydrateOptions;\n          _context.prev = 1;\n          _context.next = 4;\n          return persister.restoreClient();\n        case 4:\n          persistedClient = _context.sent;\n          if (persistedClient) {\n            if (persistedClient.timestamp) {\n              expired = Date.now() - persistedClient.timestamp > maxAge;\n              busted = persistedClient.buster !== buster;\n              if (expired || busted) {\n                persister.removeClient();\n              } else {\n                hydrate(queryClient, persistedClient.clientState, hydrateOptions);\n              }\n            } else {\n              persister.removeClient();\n            }\n          }\n          _context.next = 12;\n          break;\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](1);\n          if (process.env.NODE_ENV !== 'production') {\n            queryClient.getLogger().error(_context.t0);\n            queryClient.getLogger().warn('Encountered an error attempting to restore client cache from persisted location. As a precaution, the persisted cache will be discarded.');\n          }\n          persister.removeClient();\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[1, 8]]);\n  }));\n  return _persistQueryClientRestore.apply(this, arguments);\n}\nfunction persistQueryClientSave(_x2) {\n  return _persistQueryClientSave.apply(this, arguments);\n}\n/**\n * Subscribe to QueryCache and MutationCache updates (for persisting)\n * @returns an unsubscribe function (to discontinue monitoring)\n */\nfunction _persistQueryClientSave() {\n  _persistQueryClientSave = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref2) {\n    var queryClient, persister, _ref2$buster, buster, dehydrateOptions, persistClient;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          queryClient = _ref2.queryClient, persister = _ref2.persister, _ref2$buster = _ref2.buster, buster = _ref2$buster === void 0 ? '' : _ref2$buster, dehydrateOptions = _ref2.dehydrateOptions;\n          persistClient = {\n            buster: buster,\n            timestamp: Date.now(),\n            clientState: dehydrate(queryClient, dehydrateOptions)\n          };\n          _context2.next = 4;\n          return persister.persistClient(persistClient);\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _persistQueryClientSave.apply(this, arguments);\n}\nfunction persistQueryClientSubscribe(props) {\n  var unsubscribeQueryCache = props.queryClient.getQueryCache().subscribe(function () {\n    persistQueryClientSave(props);\n  });\n  var unusbscribeMutationCache = props.queryClient.getMutationCache().subscribe(function () {\n    persistQueryClientSave(props);\n  });\n  return function () {\n    unsubscribeQueryCache();\n    unusbscribeMutationCache();\n  };\n}\n/**\n * Restores persisted data to QueryCache and persists further changes.\n */\n\nfunction persistQueryClient(props) {\n  var hasUnsubscribed = false;\n  var persistQueryClientUnsubscribe;\n  var unsubscribe = function unsubscribe() {\n    hasUnsubscribed = true;\n    persistQueryClientUnsubscribe == null ? void 0 : persistQueryClientUnsubscribe();\n  }; // Attempt restore\n\n  var restorePromise = persistQueryClientRestore(props).then(function () {\n    if (!hasUnsubscribed) {\n      // Subscribe to changes in the query cache to trigger the save\n      persistQueryClientUnsubscribe = persistQueryClientSubscribe(props);\n    }\n  });\n  return [unsubscribe, restorePromise];\n}\nexport { persistQueryClient, persistQueryClientRestore, persistQueryClientSave, persistQueryClientSubscribe };","map":{"version":3,"mappings":"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","names":["persistQueryClientRestore","queryClient","persister","maxAge","buster","hydrateOptions","restoreClient","persistedClient","timestamp","expired","Date","now","busted","removeClient","hydrate","clientState","process","env","NODE_ENV","getLogger","error","warn","persistQueryClientSave","dehydrateOptions","persistClient","dehydrate","persistQueryClientSubscribe","props","unsubscribeQueryCache","getQueryCache","subscribe","unusbscribeMutationCache","getMutationCache","persistQueryClient","hasUnsubscribed","persistQueryClientUnsubscribe","unsubscribe","restorePromise","then"],"sources":["/Users/mac/Desktop/Dex/dexStarter/dex/node_modules/@tanstack/query-persist-client-core/src/persist.ts"],"sourcesContent":["import type {\n  QueryClient,\n  DehydratedState,\n  DehydrateOptions,\n  HydrateOptions,\n} from '@tanstack/query-core'\nimport { dehydrate, hydrate } from '@tanstack/query-core'\n\nexport type Promisable<T> = T | PromiseLike<T>\n\nexport interface Persister {\n  persistClient(persistClient: PersistedClient): Promisable<void>\n  restoreClient(): Promisable<PersistedClient | undefined>\n  removeClient(): Promisable<void>\n}\n\nexport interface PersistedClient {\n  timestamp: number\n  buster: string\n  clientState: DehydratedState\n}\n\nexport interface PersistQueryClienRootOptions {\n  /** The QueryClient to persist */\n  queryClient: QueryClient\n  /** The Persister interface for storing and restoring the cache\n   * to/from a persisted location */\n  persister: Persister\n  /** A unique string that can be used to forcefully\n   * invalidate existing caches if they do not share the same buster string */\n  buster?: string\n}\n\nexport interface PersistedQueryClientRestoreOptions\n  extends PersistQueryClienRootOptions {\n  /** The max-allowed age of the cache in milliseconds.\n   * If a persisted cache is found that is older than this\n   * time, it will be discarded */\n  maxAge?: number\n  /** The options passed to the hydrate function */\n  hydrateOptions?: HydrateOptions\n}\n\nexport interface PersistedQueryClientSaveOptions\n  extends PersistQueryClienRootOptions {\n  /** The options passed to the dehydrate function */\n  dehydrateOptions?: DehydrateOptions\n}\n\nexport interface PersistQueryClientOptions\n  extends PersistedQueryClientRestoreOptions,\n    PersistedQueryClientSaveOptions,\n    PersistQueryClienRootOptions {}\n\n/**\n * Restores persisted data to the QueryCache\n *  - data obtained from persister.restoreClient\n *  - data is hydrated using hydrateOptions\n * If data is expired, busted, empty, or throws, it runs persister.removeClient\n */\nexport async function persistQueryClientRestore({\n  queryClient,\n  persister,\n  maxAge = 1000 * 60 * 60 * 24,\n  buster = '',\n  hydrateOptions,\n}: PersistedQueryClientRestoreOptions) {\n  try {\n    const persistedClient = await persister.restoreClient()\n\n    if (persistedClient) {\n      if (persistedClient.timestamp) {\n        const expired = Date.now() - persistedClient.timestamp > maxAge\n        const busted = persistedClient.buster !== buster\n        if (expired || busted) {\n          persister.removeClient()\n        } else {\n          hydrate(queryClient, persistedClient.clientState, hydrateOptions)\n        }\n      } else {\n        persister.removeClient()\n      }\n    }\n  } catch (err) {\n    if (process.env.NODE_ENV !== 'production') {\n      queryClient.getLogger().error(err)\n      queryClient\n        .getLogger()\n        .warn(\n          'Encountered an error attempting to restore client cache from persisted location. As a precaution, the persisted cache will be discarded.',\n        )\n    }\n    persister.removeClient()\n  }\n}\n\n/**\n * Persists data from the QueryCache\n *  - data dehydrated using dehydrateOptions\n *  - data is persisted using persister.persistClient\n */\nexport async function persistQueryClientSave({\n  queryClient,\n  persister,\n  buster = '',\n  dehydrateOptions,\n}: PersistedQueryClientSaveOptions) {\n  const persistClient: PersistedClient = {\n    buster,\n    timestamp: Date.now(),\n    clientState: dehydrate(queryClient, dehydrateOptions),\n  }\n\n  await persister.persistClient(persistClient)\n}\n\n/**\n * Subscribe to QueryCache and MutationCache updates (for persisting)\n * @returns an unsubscribe function (to discontinue monitoring)\n */\nexport function persistQueryClientSubscribe(\n  props: PersistedQueryClientSaveOptions,\n) {\n  const unsubscribeQueryCache = props.queryClient\n    .getQueryCache()\n    .subscribe(() => {\n      persistQueryClientSave(props)\n    })\n\n  const unusbscribeMutationCache = props.queryClient\n    .getMutationCache()\n    .subscribe(() => {\n      persistQueryClientSave(props)\n    })\n\n  return () => {\n    unsubscribeQueryCache()\n    unusbscribeMutationCache()\n  }\n}\n\n/**\n * Restores persisted data to QueryCache and persists further changes.\n */\nexport function persistQueryClient(\n  props: PersistQueryClientOptions,\n): [() => void, Promise<void>] {\n  let hasUnsubscribed = false\n  let persistQueryClientUnsubscribe: (() => void) | undefined\n  const unsubscribe = () => {\n    hasUnsubscribed = true\n    persistQueryClientUnsubscribe?.()\n  }\n\n  // Attempt restore\n  const restorePromise = persistQueryClientRestore(props).then(() => {\n    if (!hasUnsubscribed) {\n      // Subscribe to changes in the query cache to trigger the save\n      persistQueryClientUnsubscribe = persistQueryClientSubscribe(props)\n    }\n  })\n\n  return [unsubscribe, restorePromise]\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}