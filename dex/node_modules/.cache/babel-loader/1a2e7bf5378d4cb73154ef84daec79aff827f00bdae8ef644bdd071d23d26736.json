{"ast":null,"code":"import _slicedToArray from \"/Users/mac/Desktop/Dex/dexStarter/dex/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/mac/Desktop/Dex/dexStarter/dex/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/mac/Desktop/Dex/dexStarter/dex/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/mac/Desktop/Dex/dexStarter/dex/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/mac/Desktop/Dex/dexStarter/dex/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { hashQueryKeyByOptions, parseFilterArgs, matchQuery } from './utils.mjs';\nimport { Query } from './query.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { Subscribable } from './subscribable.mjs';\n\n// CLASS\nvar QueryCache = /*#__PURE__*/function (_Subscribable) {\n  _inherits(QueryCache, _Subscribable);\n  var _super = _createSuper(QueryCache);\n  function QueryCache(config) {\n    var _this;\n    _classCallCheck(this, QueryCache);\n    _this = _super.call(this);\n    _this.config = config || {};\n    _this.queries = [];\n    _this.queriesMap = {};\n    return _this;\n  }\n  _createClass(QueryCache, [{\n    key: \"build\",\n    value: function build(client, options, state) {\n      var _options$queryHash;\n      var queryKey = options.queryKey;\n      var queryHash = (_options$queryHash = options.queryHash) != null ? _options$queryHash : hashQueryKeyByOptions(queryKey, options);\n      var query = this.get(queryHash);\n      if (!query) {\n        query = new Query({\n          cache: this,\n          logger: client.getLogger(),\n          queryKey: queryKey,\n          queryHash: queryHash,\n          options: client.defaultQueryOptions(options),\n          state: state,\n          defaultOptions: client.getQueryDefaults(queryKey)\n        });\n        this.add(query);\n      }\n      return query;\n    }\n  }, {\n    key: \"add\",\n    value: function add(query) {\n      if (!this.queriesMap[query.queryHash]) {\n        this.queriesMap[query.queryHash] = query;\n        this.queries.push(query);\n        this.notify({\n          type: 'added',\n          query: query\n        });\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(query) {\n      var queryInMap = this.queriesMap[query.queryHash];\n      if (queryInMap) {\n        query.destroy();\n        this.queries = this.queries.filter(function (x) {\n          return x !== query;\n        });\n        if (queryInMap === query) {\n          delete this.queriesMap[query.queryHash];\n        }\n        this.notify({\n          type: 'removed',\n          query: query\n        });\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var _this2 = this;\n      notifyManager.batch(function () {\n        _this2.queries.forEach(function (query) {\n          _this2.remove(query);\n        });\n      });\n    }\n  }, {\n    key: \"get\",\n    value: function get(queryHash) {\n      return this.queriesMap[queryHash];\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      return this.queries;\n    }\n  }, {\n    key: \"find\",\n    value: function find(arg1, arg2) {\n      var _parseFilterArgs = parseFilterArgs(arg1, arg2),\n        _parseFilterArgs2 = _slicedToArray(_parseFilterArgs, 1),\n        filters = _parseFilterArgs2[0];\n      if (typeof filters.exact === 'undefined') {\n        filters.exact = true;\n      }\n      return this.queries.find(function (query) {\n        return matchQuery(filters, query);\n      });\n    }\n  }, {\n    key: \"findAll\",\n    value: function findAll(arg1, arg2) {\n      var _parseFilterArgs3 = parseFilterArgs(arg1, arg2),\n        _parseFilterArgs4 = _slicedToArray(_parseFilterArgs3, 1),\n        filters = _parseFilterArgs4[0];\n      return Object.keys(filters).length > 0 ? this.queries.filter(function (query) {\n        return matchQuery(filters, query);\n      }) : this.queries;\n    }\n  }, {\n    key: \"notify\",\n    value: function notify(event) {\n      var _this3 = this;\n      notifyManager.batch(function () {\n        _this3.listeners.forEach(function (listener) {\n          listener(event);\n        });\n      });\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus() {\n      var _this4 = this;\n      notifyManager.batch(function () {\n        _this4.queries.forEach(function (query) {\n          query.onFocus();\n        });\n      });\n    }\n  }, {\n    key: \"onOnline\",\n    value: function onOnline() {\n      var _this5 = this;\n      notifyManager.batch(function () {\n        _this5.queries.forEach(function (query) {\n          query.onOnline();\n        });\n      });\n    }\n  }]);\n  return QueryCache;\n}(Subscribable);\nexport { QueryCache };","map":{"version":3,"mappings":"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","names":["QueryCache","constructor","config","queries","queriesMap","build","client","options","state","queryKey","queryHash","hashQueryKeyByOptions","query","get","Query","cache","logger","getLogger","defaultQueryOptions","defaultOptions","getQueryDefaults","add","push","notify","type","remove","queryInMap","destroy","filter","x","clear","notifyManager","batch","forEach","getAll","find","arg1","arg2","parseFilterArgs","filters","exact","matchQuery","findAll","Object","keys","length","event","listeners","listener","onFocus","onOnline","Subscribable"],"sources":["/Users/mac/Desktop/Dex/dexStarter/dex/node_modules/@tanstack/query-core/src/queryCache.ts"],"sourcesContent":["import type { QueryFilters } from './utils'\nimport { hashQueryKeyByOptions, matchQuery, parseFilterArgs } from './utils'\nimport type { Action, QueryState } from './query'\nimport { Query } from './query'\nimport type { QueryKey, QueryOptions } from './types'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport type { QueryObserver } from './queryObserver'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  onError?: (error: unknown, query: Query<unknown, unknown, unknown>) => void\n  onSuccess?: (data: unknown, query: Query<unknown, unknown, unknown>) => void\n}\n\ninterface QueryHashMap {\n  [hash: string]: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryAdded {\n  type: 'added'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryRemoved {\n  type: 'removed'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryUpdated {\n  type: 'updated'\n  query: Query<any, any, any, any>\n  action: Action<any, any>\n}\n\ninterface NotifyEventQueryObserverAdded {\n  type: 'observerAdded'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverRemoved {\n  type: 'observerRemoved'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverResultsUpdated {\n  type: 'observerResultsUpdated'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverOptionsUpdated {\n  type: 'observerOptionsUpdated'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ntype QueryCacheNotifyEvent =\n  | NotifyEventQueryAdded\n  | NotifyEventQueryRemoved\n  | NotifyEventQueryUpdated\n  | NotifyEventQueryObserverAdded\n  | NotifyEventQueryObserverRemoved\n  | NotifyEventQueryObserverResultsUpdated\n  | NotifyEventQueryObserverOptionsUpdated\n\ntype QueryCacheListener = (event: QueryCacheNotifyEvent) => void\n\n// CLASS\n\nexport class QueryCache extends Subscribable<QueryCacheListener> {\n  config: QueryCacheConfig\n\n  private queries: Query<any, any, any, any>[]\n  private queriesMap: QueryHashMap\n\n  constructor(config?: QueryCacheConfig) {\n    super()\n    this.config = config || {}\n    this.queries = []\n    this.queriesMap = {}\n  }\n\n  build<TQueryFnData, TError, TData, TQueryKey extends QueryKey>(\n    client: QueryClient,\n    options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    state?: QueryState<TData, TError>,\n  ): Query<TQueryFnData, TError, TData, TQueryKey> {\n    const queryKey = options.queryKey!\n    const queryHash =\n      options.queryHash ?? hashQueryKeyByOptions(queryKey, options)\n    let query = this.get<TQueryFnData, TError, TData, TQueryKey>(queryHash)\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        logger: client.getLogger(),\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n      })\n      this.add(query)\n    }\n\n    return query\n  }\n\n  add(query: Query<any, any, any, any>): void {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query\n      this.queries.push(query)\n      this.notify({\n        type: 'added',\n        query,\n      })\n    }\n  }\n\n  remove(query: Query<any, any, any, any>): void {\n    const queryInMap = this.queriesMap[query.queryHash]\n\n    if (queryInMap) {\n      query.destroy()\n\n      this.queries = this.queries.filter((x) => x !== query)\n\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash]\n      }\n\n      this.notify({ type: 'removed', query })\n    }\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach((query) => {\n        this.remove(query)\n      })\n    })\n  }\n\n  get<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueyKey extends QueryKey = QueryKey,\n  >(\n    queryHash: string,\n  ): Query<TQueryFnData, TError, TData, TQueyKey> | undefined {\n    return this.queriesMap[queryHash]\n  }\n\n  getAll(): Query[] {\n    return this.queries\n  }\n\n  find<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    arg1: QueryKey,\n    arg2?: QueryFilters,\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    const [filters] = parseFilterArgs(arg1, arg2)\n\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.queries.find((query) => matchQuery(filters, query))\n  }\n\n  findAll(queryKey?: QueryKey, filters?: QueryFilters): Query[]\n  findAll(filters?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[] {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    return Object.keys(filters).length > 0\n      ? this.queries.filter((query) => matchQuery(filters, query))\n      : this.queries\n  }\n\n  notify(event: QueryCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(event)\n      })\n    })\n  }\n\n  onFocus(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach((query) => {\n        query.onFocus()\n      })\n    })\n  }\n\n  onOnline(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach((query) => {\n        query.onOnline()\n      })\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}