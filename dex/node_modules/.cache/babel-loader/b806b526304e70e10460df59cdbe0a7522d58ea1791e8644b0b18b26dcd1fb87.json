{"ast":null,"code":"var ensureStaleTime = function ensureStaleTime(defaultedOptions) {\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000;\n    }\n  }\n};\nvar willFetch = function willFetch(result, isRestoring) {\n  return result.isLoading && result.isFetching && !isRestoring;\n};\nvar shouldSuspend = function shouldSuspend(defaultedOptions, result, isRestoring) {\n  return (defaultedOptions == null ? void 0 : defaultedOptions.suspense) && willFetch(result, isRestoring);\n};\nvar fetchOptimistic = function fetchOptimistic(defaultedOptions, observer, errorResetBoundary) {\n  return observer.fetchOptimistic(defaultedOptions).then(function (_ref) {\n    var data = _ref.data;\n    defaultedOptions.onSuccess == null ? void 0 : defaultedOptions.onSuccess(data);\n    defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(data, null);\n  }).catch(function (error) {\n    errorResetBoundary.clearReset();\n    defaultedOptions.onError == null ? void 0 : defaultedOptions.onError(error);\n    defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(undefined, error);\n  });\n};\nexport { ensureStaleTime, fetchOptimistic, shouldSuspend, willFetch };","map":{"version":3,"mappings":"AAMaA,mBAAe,GAC1BC,SADWD,eAAe,CAC1BC,gBAD6B,EAE1B;EACH,IAAIA,gBAAgB,CAACC,QAArB,EAA+B;IAC7B;IACA;IACA,IAAI,OAAOD,gBAAgB,CAACE,SAAxB,KAAsC,QAA1C,EAAoD;MAClDF,gBAAgB,CAACE,SAAjB,GAA6B,IAA7B;IACD;EACF;AACF;IAEYC,SAAS,GAAG,SAAZA,SAAS,CACpBC,MADuB,EAEvBC,WAFuB;EAAA,OAGpBD,MAAM,CAACE,SAAP,IAAoBF,MAAM,CAACG,UAA3B,IAAyC,CAACF;AAAAA;AAExC,IAAMG,aAAa,GAAG,SAAhBA,aAAa,CACxBR,gBAD2B,EAI3BI,MAJ2B,EAK3BC,WAL2B;EAAA,OAMxB,iBAAgB,IAAhB,gCAAgB,CAAEJ,QAAlB,KAA8BE,SAAS,CAACC,MAAD,EAASC,WAAT;AAAA;IAE/BI,eAAe,GAAG,SAAlBA,eAAe,CAO1BT,gBAP6B,EAc7BU,QAd6B,EAe7BC,kBAf6B;EAAA,OAiB7BD,QAAQ,CACLD,eADH,CACmBT,gBADnB,CAEGY,KAFH,CAEQ,gBAAc;IAAA,IAAXC;IACPb,gBAAgB,CAACc,SAAjB,oCAAgB,CAACA,SAAjB,CAA6BD,IAA7B;IACAb,gBAAgB,CAACe,SAAjB,oCAAgB,CAACA,SAAjB,CAA6BF,IAA7B,EAAmC,IAAnC;EACD,CALH,CAMGG,MANH,CAMUC,eAAD,EAAW;IAChBN,kBAAkB,CAACO,UAAnB;IACAlB,gBAAgB,CAACmB,OAAjB,oCAAgB,CAACA,OAAjB,CAA2BF,KAA3B;IACAjB,gBAAgB,CAACe,SAAjB,oCAAgB,CAACA,SAAjB,CAA6BK,SAA7B,EAAwCH,KAAxC;EACD,CAVH;AAAA","names":["ensureStaleTime","defaultedOptions","suspense","staleTime","willFetch","result","isRestoring","isLoading","isFetching","shouldSuspend","fetchOptimistic","observer","errorResetBoundary","then","data","onSuccess","onSettled","catch","error","clearReset","onError","undefined"],"sources":["/Users/mac/Desktop/Dex/dexStarter/dex/node_modules/@tanstack/react-query/src/suspense.ts"],"sourcesContent":["import type { DefaultedQueryObserverOptions } from '@tanstack/query-core'\nimport type { QueryObserver } from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\nimport type { QueryObserverResult } from '@tanstack/query-core'\nimport type { QueryKey } from '@tanstack/query-core'\n\nexport const ensureStaleTime = (\n  defaultedOptions: DefaultedQueryObserverOptions<any, any, any, any, any>,\n) => {\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000\n    }\n  }\n}\n\nexport const willFetch = (\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => result.isLoading && result.isFetching && !isRestoring\n\nexport const shouldSuspend = (\n  defaultedOptions:\n    | DefaultedQueryObserverOptions<any, any, any, any, any>\n    | undefined,\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => defaultedOptions?.suspense && willFetch(result, isRestoring)\n\nexport const fetchOptimistic = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  defaultedOptions: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) =>\n  observer\n    .fetchOptimistic(defaultedOptions)\n    .then(({ data }) => {\n      defaultedOptions.onSuccess?.(data as TData)\n      defaultedOptions.onSettled?.(data, null)\n    })\n    .catch((error) => {\n      errorResetBoundary.clearReset()\n      defaultedOptions.onError?.(error)\n      defaultedOptions.onSettled?.(undefined, error)\n    })\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}