{"ast":null,"code":"import _slicedToArray from \"/Users/mac/Desktop/Dex/dexStarter/dex/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport { parseFilterArgs, notifyManager } from '@tanstack/query-core';\nimport { useSyncExternalStore } from './useSyncExternalStore.mjs';\nimport { useQueryClient } from './QueryClientProvider.mjs';\nfunction useIsFetching(arg1, arg2, arg3) {\n  var _parseFilterArgs = parseFilterArgs(arg1, arg2, arg3),\n    _parseFilterArgs2 = _slicedToArray(_parseFilterArgs, 2),\n    filters = _parseFilterArgs2[0],\n    _parseFilterArgs2$ = _parseFilterArgs2[1],\n    options = _parseFilterArgs2$ === void 0 ? {} : _parseFilterArgs2$;\n  var queryClient = useQueryClient({\n    context: options.context\n  });\n  var queryCache = queryClient.getQueryCache();\n  return useSyncExternalStore(React.useCallback(function (onStoreChange) {\n    return queryCache.subscribe(notifyManager.batchCalls(onStoreChange));\n  }, [queryCache]), function () {\n    return queryClient.isFetching(filters);\n  }, function () {\n    return queryClient.isFetching(filters);\n  });\n}\nexport { useIsFetching };","map":{"version":3,"mappings":";;;;;AAgBO,SAASA,aAAT,CACLC,IADK,EAELC,IAFK,EAGLC,IAHK,EAIG;EACR,uBAAgCC,eAAe,CAACH,IAAD,EAAOC,IAAP,EAAaC,IAAb,CAA/C;IAAA;IAAOE,OAAD;IAAA;IAAUC,OAAO,mCAAG,EAApB;EACN,IAAMC,WAAW,GAAGC,cAAc,CAAC;IAAEC,OAAO,EAAEH,OAAO,CAACG;EAAnB,CAAD,CAAlC;EACA,IAAMC,UAAU,GAAGH,WAAW,CAACI,aAAZ,EAAnB;EAEA,OAAOC,oBAAoB,CACzBC,KAAK,CAACC,WAAN,CACGC,uBAAD;IAAA,OACEL,UAAU,CAACM,SAAX,CAAqBC,aAAa,CAACC,UAAd,CAAyBH,aAAzB,CAArB,CAFJ;EAAA,GAGE,CAACL,UAAD,CAHF,CADyB,EAMzB;IAAA,OAAMH,WAAW,CAACY,UAAZ,CAAuBd,OAAvB,CANmB;EAAA,GAOzB;IAAA,OAAME,WAAW,CAACY,UAAZ,CAAuBd,OAAvB,CAPmB;EAAA,EAA3B;AASD","names":["useIsFetching","arg1","arg2","arg3","parseFilterArgs","filters","options","queryClient","useQueryClient","context","queryCache","getQueryCache","useSyncExternalStore","React","useCallback","onStoreChange","subscribe","notifyManager","batchCalls","isFetching"],"sources":["/Users/mac/Desktop/Dex/dexStarter/dex/node_modules/@tanstack/react-query/src/useIsFetching.ts"],"sourcesContent":["import * as React from 'react'\nimport type { QueryKey, QueryFilters } from '@tanstack/query-core'\nimport { notifyManager, parseFilterArgs } from '@tanstack/query-core'\n\nimport { useSyncExternalStore } from './useSyncExternalStore'\nimport type { ContextOptions } from './types'\nimport { useQueryClient } from './QueryClientProvider'\n\ninterface Options extends ContextOptions {}\n\nexport function useIsFetching(filters?: QueryFilters, options?: Options): number\nexport function useIsFetching(\n  queryKey?: QueryKey,\n  filters?: QueryFilters,\n  options?: Options,\n): number\nexport function useIsFetching(\n  arg1?: QueryKey | QueryFilters,\n  arg2?: QueryFilters | Options,\n  arg3?: Options,\n): number {\n  const [filters, options = {}] = parseFilterArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient({ context: options.context })\n  const queryCache = queryClient.getQueryCache()\n\n  return useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        queryCache.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [queryCache],\n    ),\n    () => queryClient.isFetching(filters),\n    () => queryClient.isFetching(filters),\n  )\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}