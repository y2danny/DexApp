{"ast":null,"code":"import _objectSpread from \"/Users/mac/Desktop/Dex/dexStarter/dex/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/mac/Desktop/Dex/dexStarter/dex/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _classCallCheck from \"/Users/mac/Desktop/Dex/dexStarter/dex/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/mac/Desktop/Dex/dexStarter/dex/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/mac/Desktop/Dex/dexStarter/dex/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/mac/Desktop/Dex/dexStarter/dex/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar _excluded = [\"refetchPage\"];\nimport { shallowEqualObjects, noop, isServer, isValidTimeout, timeUntilStale, replaceData } from './utils.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { focusManager } from './focusManager.mjs';\nimport { Subscribable } from './subscribable.mjs';\nimport { canFetch, isCancelledError } from './retryer.mjs';\nvar QueryObserver = /*#__PURE__*/function (_Subscribable) {\n  _inherits(QueryObserver, _Subscribable);\n  var _super = _createSuper(QueryObserver);\n  function QueryObserver(client, options) {\n    var _this;\n    _classCallCheck(this, QueryObserver);\n    _this = _super.call(this);\n    _this.client = client;\n    _this.options = options;\n    _this.trackedProps = new Set();\n    _this.selectError = null;\n    _this.bindMethods();\n    _this.setOptions(options);\n    return _this;\n  }\n  _createClass(QueryObserver, [{\n    key: \"bindMethods\",\n    value: function bindMethods() {\n      this.remove = this.remove.bind(this);\n      this.refetch = this.refetch.bind(this);\n    }\n  }, {\n    key: \"onSubscribe\",\n    value: function onSubscribe() {\n      if (this.listeners.length === 1) {\n        this.currentQuery.addObserver(this);\n        if (shouldFetchOnMount(this.currentQuery, this.options)) {\n          this.executeFetch();\n        }\n        this.updateTimers();\n      }\n    }\n  }, {\n    key: \"onUnsubscribe\",\n    value: function onUnsubscribe() {\n      if (!this.listeners.length) {\n        this.destroy();\n      }\n    }\n  }, {\n    key: \"shouldFetchOnReconnect\",\n    value: function shouldFetchOnReconnect() {\n      return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnReconnect);\n    }\n  }, {\n    key: \"shouldFetchOnWindowFocus\",\n    value: function shouldFetchOnWindowFocus() {\n      return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnWindowFocus);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.listeners = [];\n      this.clearStaleTimeout();\n      this.clearRefetchInterval();\n      this.currentQuery.removeObserver(this);\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options, notifyOptions) {\n      var prevOptions = this.options;\n      var prevQuery = this.currentQuery;\n      this.options = this.client.defaultQueryOptions(options);\n      if (process.env.NODE_ENV !== 'production' && typeof (options == null ? void 0 : options.isDataEqual) !== 'undefined') {\n        this.client.getLogger().error(\"The isDataEqual option has been deprecated and will be removed in the next major version. You can achieve the same functionality by passing a function as the structuralSharing option\");\n      }\n      if (!shallowEqualObjects(prevOptions, this.options)) {\n        this.client.getQueryCache().notify({\n          type: 'observerOptionsUpdated',\n          query: this.currentQuery,\n          observer: this\n        });\n      }\n      if (typeof this.options.enabled !== 'undefined' && typeof this.options.enabled !== 'boolean') {\n        throw new Error('Expected enabled to be a boolean');\n      } // Keep previous query key if the user does not supply one\n\n      if (!this.options.queryKey) {\n        this.options.queryKey = prevOptions.queryKey;\n      }\n      this.updateQuery();\n      var mounted = this.hasListeners(); // Fetch if there are subscribers\n\n      if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {\n        this.executeFetch();\n      } // Update result\n\n      this.updateResult(notifyOptions); // Update stale interval if needed\n\n      if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {\n        this.updateStaleTimeout();\n      }\n      var nextRefetchInterval = this.computeRefetchInterval(); // Update refetch interval if needed\n\n      if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || nextRefetchInterval !== this.currentRefetchInterval)) {\n        this.updateRefetchInterval(nextRefetchInterval);\n      }\n    }\n  }, {\n    key: \"getOptimisticResult\",\n    value: function getOptimisticResult(options) {\n      var query = this.client.getQueryCache().build(this.client, options);\n      return this.createResult(query, options);\n    }\n  }, {\n    key: \"getCurrentResult\",\n    value: function getCurrentResult() {\n      return this.currentResult;\n    }\n  }, {\n    key: \"trackResult\",\n    value: function trackResult(result) {\n      var _this2 = this;\n      var trackedResult = {};\n      Object.keys(result).forEach(function (key) {\n        Object.defineProperty(trackedResult, key, {\n          configurable: false,\n          enumerable: true,\n          get: function get() {\n            _this2.trackedProps.add(key);\n            return result[key];\n          }\n        });\n      });\n      return trackedResult;\n    }\n  }, {\n    key: \"getCurrentQuery\",\n    value: function getCurrentQuery() {\n      return this.currentQuery;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      this.client.getQueryCache().remove(this.currentQuery);\n    }\n  }, {\n    key: \"refetch\",\n    value: function refetch() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        refetchPage = _ref.refetchPage,\n        options = _objectWithoutProperties(_ref, _excluded);\n      return this.fetch(_objectSpread(_objectSpread({}, options), {}, {\n        meta: {\n          refetchPage: refetchPage\n        }\n      }));\n    }\n  }, {\n    key: \"fetchOptimistic\",\n    value: function fetchOptimistic(options) {\n      var _this3 = this;\n      var defaultedOptions = this.client.defaultQueryOptions(options);\n      var query = this.client.getQueryCache().build(this.client, defaultedOptions);\n      query.isFetchingOptimistic = true;\n      return query.fetch().then(function () {\n        return _this3.createResult(query, defaultedOptions);\n      });\n    }\n  }, {\n    key: \"fetch\",\n    value: function fetch(fetchOptions) {\n      var _this4 = this;\n      var _fetchOptions$cancelR;\n      return this.executeFetch(_objectSpread(_objectSpread({}, fetchOptions), {}, {\n        cancelRefetch: (_fetchOptions$cancelR = fetchOptions.cancelRefetch) != null ? _fetchOptions$cancelR : true\n      })).then(function () {\n        _this4.updateResult();\n        return _this4.currentResult;\n      });\n    }\n  }, {\n    key: \"executeFetch\",\n    value: function executeFetch(fetchOptions) {\n      // Make sure we reference the latest query as the current one might have been removed\n      this.updateQuery(); // Fetch\n\n      var promise = this.currentQuery.fetch(this.options, fetchOptions);\n      if (!(fetchOptions != null && fetchOptions.throwOnError)) {\n        promise = promise.catch(noop);\n      }\n      return promise;\n    }\n  }, {\n    key: \"updateStaleTimeout\",\n    value: function updateStaleTimeout() {\n      var _this5 = this;\n      this.clearStaleTimeout();\n      if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {\n        return;\n      }\n      var time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime); // The timeout is sometimes triggered 1 ms before the stale time expiration.\n      // To mitigate this issue we always add 1 ms to the timeout.\n\n      var timeout = time + 1;\n      this.staleTimeoutId = setTimeout(function () {\n        if (!_this5.currentResult.isStale) {\n          _this5.updateResult();\n        }\n      }, timeout);\n    }\n  }, {\n    key: \"computeRefetchInterval\",\n    value: function computeRefetchInterval() {\n      var _this$options$refetch;\n      return typeof this.options.refetchInterval === 'function' ? this.options.refetchInterval(this.currentResult.data, this.currentQuery) : (_this$options$refetch = this.options.refetchInterval) != null ? _this$options$refetch : false;\n    }\n  }, {\n    key: \"updateRefetchInterval\",\n    value: function updateRefetchInterval(nextInterval) {\n      var _this6 = this;\n      this.clearRefetchInterval();\n      this.currentRefetchInterval = nextInterval;\n      if (isServer || this.options.enabled === false || !isValidTimeout(this.currentRefetchInterval) || this.currentRefetchInterval === 0) {\n        return;\n      }\n      this.refetchIntervalId = setInterval(function () {\n        if (_this6.options.refetchIntervalInBackground || focusManager.isFocused()) {\n          _this6.executeFetch();\n        }\n      }, this.currentRefetchInterval);\n    }\n  }, {\n    key: \"updateTimers\",\n    value: function updateTimers() {\n      this.updateStaleTimeout();\n      this.updateRefetchInterval(this.computeRefetchInterval());\n    }\n  }, {\n    key: \"clearStaleTimeout\",\n    value: function clearStaleTimeout() {\n      if (this.staleTimeoutId) {\n        clearTimeout(this.staleTimeoutId);\n        this.staleTimeoutId = undefined;\n      }\n    }\n  }, {\n    key: \"clearRefetchInterval\",\n    value: function clearRefetchInterval() {\n      if (this.refetchIntervalId) {\n        clearInterval(this.refetchIntervalId);\n        this.refetchIntervalId = undefined;\n      }\n    }\n  }, {\n    key: \"createResult\",\n    value: function createResult(query, options) {\n      var prevQuery = this.currentQuery;\n      var prevOptions = this.options;\n      var prevResult = this.currentResult;\n      var prevResultState = this.currentResultState;\n      var prevResultOptions = this.currentResultOptions;\n      var queryChange = query !== prevQuery;\n      var queryInitialState = queryChange ? query.state : this.currentQueryInitialState;\n      var prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;\n      var state = query.state;\n      var dataUpdatedAt = state.dataUpdatedAt,\n        error = state.error,\n        errorUpdatedAt = state.errorUpdatedAt,\n        fetchStatus = state.fetchStatus,\n        status = state.status;\n      var isPreviousData = false;\n      var isPlaceholderData = false;\n      var data; // Optimistically set result in fetching state if needed\n\n      if (options._optimisticResults) {\n        var mounted = this.hasListeners();\n        var fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n        var fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n        if (fetchOnMount || fetchOptionally) {\n          fetchStatus = canFetch(query.options.networkMode) ? 'fetching' : 'paused';\n          if (!dataUpdatedAt) {\n            status = 'loading';\n          }\n        }\n        if (options._optimisticResults === 'isRestoring') {\n          fetchStatus = 'idle';\n        }\n      } // Keep previous data if needed\n\n      if (options.keepPreviousData && !state.dataUpdatedAt && prevQueryResult != null && prevQueryResult.isSuccess && status !== 'error') {\n        data = prevQueryResult.data;\n        dataUpdatedAt = prevQueryResult.dataUpdatedAt;\n        status = prevQueryResult.status;\n        isPreviousData = true;\n      } // Select data if needed\n      else if (options.select && typeof state.data !== 'undefined') {\n        // Memoize select result\n        if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === this.selectFn) {\n          data = this.selectResult;\n        } else {\n          try {\n            this.selectFn = options.select;\n            data = options.select(state.data);\n            data = replaceData(prevResult == null ? void 0 : prevResult.data, data, options);\n            this.selectResult = data;\n            this.selectError = null;\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError);\n            }\n            this.selectError = selectError;\n          }\n        }\n      } // Use query data\n      else {\n        data = state.data;\n      } // Show placeholder data if needed\n\n      if (typeof options.placeholderData !== 'undefined' && typeof data === 'undefined' && status === 'loading') {\n        var placeholderData; // Memoize placeholder data\n\n        if (prevResult != null && prevResult.isPlaceholderData && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {\n          placeholderData = prevResult.data;\n        } else {\n          placeholderData = typeof options.placeholderData === 'function' ? options.placeholderData() : options.placeholderData;\n          if (options.select && typeof placeholderData !== 'undefined') {\n            try {\n              placeholderData = options.select(placeholderData);\n              this.selectError = null;\n            } catch (selectError) {\n              if (process.env.NODE_ENV !== 'production') {\n                this.client.getLogger().error(selectError);\n              }\n              this.selectError = selectError;\n            }\n          }\n        }\n        if (typeof placeholderData !== 'undefined') {\n          status = 'success';\n          data = replaceData(prevResult == null ? void 0 : prevResult.data, placeholderData, options);\n          isPlaceholderData = true;\n        }\n      }\n      if (this.selectError) {\n        error = this.selectError;\n        data = this.selectResult;\n        errorUpdatedAt = Date.now();\n        status = 'error';\n      }\n      var isFetching = fetchStatus === 'fetching';\n      var isLoading = status === 'loading';\n      var isError = status === 'error';\n      var result = {\n        status: status,\n        fetchStatus: fetchStatus,\n        isLoading: isLoading,\n        isSuccess: status === 'success',\n        isError: isError,\n        isInitialLoading: isLoading && isFetching,\n        data: data,\n        dataUpdatedAt: dataUpdatedAt,\n        error: error,\n        errorUpdatedAt: errorUpdatedAt,\n        failureCount: state.fetchFailureCount,\n        failureReason: state.fetchFailureReason,\n        errorUpdateCount: state.errorUpdateCount,\n        isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n        isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,\n        isFetching: isFetching,\n        isRefetching: isFetching && !isLoading,\n        isLoadingError: isError && state.dataUpdatedAt === 0,\n        isPaused: fetchStatus === 'paused',\n        isPlaceholderData: isPlaceholderData,\n        isPreviousData: isPreviousData,\n        isRefetchError: isError && state.dataUpdatedAt !== 0,\n        isStale: isStale(query, options),\n        refetch: this.refetch,\n        remove: this.remove\n      };\n      return result;\n    }\n  }, {\n    key: \"updateResult\",\n    value: function updateResult(notifyOptions) {\n      var _this7 = this;\n      var prevResult = this.currentResult;\n      var nextResult = this.createResult(this.currentQuery, this.options);\n      this.currentResultState = this.currentQuery.state;\n      this.currentResultOptions = this.options; // Only notify and update result if something has changed\n\n      if (shallowEqualObjects(nextResult, prevResult)) {\n        return;\n      }\n      this.currentResult = nextResult; // Determine which callbacks to trigger\n\n      var defaultNotifyOptions = {\n        cache: true\n      };\n      var shouldNotifyListeners = function shouldNotifyListeners() {\n        if (!prevResult) {\n          return true;\n        }\n        var notifyOnChangeProps = _this7.options.notifyOnChangeProps;\n        if (notifyOnChangeProps === 'all' || !notifyOnChangeProps && !_this7.trackedProps.size) {\n          return true;\n        }\n        var includedProps = new Set(notifyOnChangeProps != null ? notifyOnChangeProps : _this7.trackedProps);\n        if (_this7.options.useErrorBoundary) {\n          includedProps.add('error');\n        }\n        return Object.keys(_this7.currentResult).some(function (key) {\n          var typedKey = key;\n          var changed = _this7.currentResult[typedKey] !== prevResult[typedKey];\n          return changed && includedProps.has(typedKey);\n        });\n      };\n      if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && shouldNotifyListeners()) {\n        defaultNotifyOptions.listeners = true;\n      }\n      this.notify(_objectSpread(_objectSpread({}, defaultNotifyOptions), notifyOptions));\n    }\n  }, {\n    key: \"updateQuery\",\n    value: function updateQuery() {\n      var query = this.client.getQueryCache().build(this.client, this.options);\n      if (query === this.currentQuery) {\n        return;\n      }\n      var prevQuery = this.currentQuery;\n      this.currentQuery = query;\n      this.currentQueryInitialState = query.state;\n      this.previousQueryResult = this.currentResult;\n      if (this.hasListeners()) {\n        prevQuery == null ? void 0 : prevQuery.removeObserver(this);\n        query.addObserver(this);\n      }\n    }\n  }, {\n    key: \"onQueryUpdate\",\n    value: function onQueryUpdate(action) {\n      var notifyOptions = {};\n      if (action.type === 'success') {\n        notifyOptions.onSuccess = !action.manual;\n      } else if (action.type === 'error' && !isCancelledError(action.error)) {\n        notifyOptions.onError = true;\n      }\n      this.updateResult(notifyOptions);\n      if (this.hasListeners()) {\n        this.updateTimers();\n      }\n    }\n  }, {\n    key: \"notify\",\n    value: function notify(notifyOptions) {\n      var _this8 = this;\n      notifyManager.batch(function () {\n        // First trigger the configuration callbacks\n        if (notifyOptions.onSuccess) {\n          var _this$options$onSucce, _this$options, _this$options$onSettl, _this$options2;\n          (_this$options$onSucce = (_this$options = _this8.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options, _this8.currentResult.data);\n          (_this$options$onSettl = (_this$options2 = _this8.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options2, _this8.currentResult.data, null);\n        } else if (notifyOptions.onError) {\n          var _this$options$onError, _this$options3, _this$options$onSettl2, _this$options4;\n          (_this$options$onError = (_this$options3 = _this8.options).onError) == null ? void 0 : _this$options$onError.call(_this$options3, _this8.currentResult.error);\n          (_this$options$onSettl2 = (_this$options4 = _this8.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options4, undefined, _this8.currentResult.error);\n        } // Then trigger the listeners\n\n        if (notifyOptions.listeners) {\n          _this8.listeners.forEach(function (listener) {\n            listener(_this8.currentResult);\n          });\n        } // Then the cache listeners\n\n        if (notifyOptions.cache) {\n          _this8.client.getQueryCache().notify({\n            query: _this8.currentQuery,\n            type: 'observerResultsUpdated'\n          });\n        }\n      });\n    }\n  }]);\n  return QueryObserver;\n}(Subscribable);\nfunction shouldLoadOnMount(query, options) {\n  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === 'error' && options.retryOnMount === false);\n}\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || query.state.dataUpdatedAt > 0 && shouldFetchOn(query, options, options.refetchOnMount);\n}\nfunction shouldFetchOn(query, options, field) {\n  if (options.enabled !== false) {\n    var value = typeof field === 'function' ? field(query) : field;\n    return value === 'always' || value !== false && isStale(query, options);\n  }\n  return false;\n}\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (!options.suspense || query.state.status !== 'error') && isStale(query, options);\n}\nfunction isStale(query, options) {\n  return query.isStaleByTime(options.staleTime);\n}\nexport { QueryObserver };","map":{"version":3,"mappings":"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","names":["QueryObserver","constructor","client","options","trackedProps","Set","selectError","bindMethods","setOptions","remove","bind","refetch","onSubscribe","listeners","length","currentQuery","addObserver","shouldFetchOnMount","executeFetch","updateTimers","onUnsubscribe","destroy","shouldFetchOnReconnect","shouldFetchOn","refetchOnReconnect","shouldFetchOnWindowFocus","refetchOnWindowFocus","clearStaleTimeout","clearRefetchInterval","removeObserver","notifyOptions","prevOptions","prevQuery","defaultQueryOptions","process","env","NODE_ENV","isDataEqual","getLogger","error","shallowEqualObjects","getQueryCache","notify","type","query","observer","enabled","Error","queryKey","updateQuery","mounted","hasListeners","shouldFetchOptionally","updateResult","staleTime","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","currentRefetchInterval","updateRefetchInterval","getOptimisticResult","build","createResult","getCurrentResult","currentResult","trackResult","result","trackedResult","Object","keys","forEach","key","defineProperty","configurable","enumerable","get","add","getCurrentQuery","refetchPage","fetch","meta","fetchOptimistic","defaultedOptions","isFetchingOptimistic","then","fetchOptions","cancelRefetch","promise","throwOnError","catch","noop","isServer","isStale","isValidTimeout","time","timeUntilStale","dataUpdatedAt","timeout","staleTimeoutId","setTimeout","refetchInterval","data","nextInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","focusManager","isFocused","clearTimeout","undefined","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","state","currentQueryInitialState","prevQueryResult","previousQueryResult","errorUpdatedAt","fetchStatus","status","isPreviousData","isPlaceholderData","_optimisticResults","fetchOnMount","fetchOptionally","canFetch","networkMode","keepPreviousData","isSuccess","select","selectFn","selectResult","replaceData","placeholderData","Date","now","isFetching","isLoading","isError","isInitialLoading","failureCount","fetchFailureCount","failureReason","fetchFailureReason","errorUpdateCount","isFetched","dataUpdateCount","isFetchedAfterMount","isRefetching","isLoadingError","isPaused","isRefetchError","nextResult","defaultNotifyOptions","cache","shouldNotifyListeners","notifyOnChangeProps","size","includedProps","useErrorBoundary","some","typedKey","changed","has","onQueryUpdate","action","onSuccess","manual","isCancelledError","onError","notifyManager","batch","onSettled","listener","Subscribable","shouldLoadOnMount","retryOnMount","refetchOnMount","field","value","suspense","isStaleByTime"],"sources":["/Users/mac/Desktop/Dex/dexStarter/dex/node_modules/@tanstack/query-core/src/queryObserver.ts"],"sourcesContent":["import type { DefaultedQueryObserverOptions, RefetchPageFilters } from './types'\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\nimport type { Query, QueryState, Action, FetchOptions } from './query'\nimport type { QueryClient } from './queryClient'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { canFetch, isCancelledError } from './retryer'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\nexport interface NotifyOptions {\n  cache?: boolean\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n\n  private client: QueryClient\n  private currentQuery!: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  private currentQueryInitialState!: QueryState<TQueryData, TError>\n  private currentResult!: QueryObserverResult<TData, TError>\n  private currentResultState?: QueryState<TQueryData, TError>\n  private currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  private previousQueryResult?: QueryObserverResult<TData, TError>\n  private selectError: TError | null\n  private selectFn?: (data: TQueryData) => TData\n  private selectResult?: TData\n  private staleTimeoutId?: ReturnType<typeof setTimeout>\n  private refetchIntervalId?: ReturnType<typeof setInterval>\n  private currentRefetchInterval?: number | false\n  private trackedProps!: Set<keyof QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.client = client\n    this.options = options\n    this.trackedProps = new Set()\n    this.selectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch()\n      }\n\n      this.updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n    this.currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.currentQuery\n\n    this.options = this.client.defaultQueryOptions(options)\n\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      typeof options?.isDataEqual !== 'undefined'\n    ) {\n      this.client\n        .getLogger()\n        .error(\n          `The isDataEqual option has been deprecated and will be removed in the next major version. You can achieve the same functionality by passing a function as the structuralSharing option`,\n        )\n    }\n\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.currentQuery,\n        observer: this,\n      })\n    }\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.updateQuery()\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        nextRefetchInterval !== this.currentRefetchInterval)\n    ) {\n      this.updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.client.getQueryCache().build(this.client, options)\n\n    return this.createResult(query, options)\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach((key) => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.currentQuery\n  }\n\n  remove(): void {\n    this.client.getQueryCache().remove(this.currentQuery)\n  }\n\n  refetch<TPageData>({\n    refetchPage,\n    ...options\n  }: RefetchOptions & RefetchPageFilters<TPageData> = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: { refetchPage },\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.client.defaultQueryOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(this.client, defaultedOptions)\n    query.isFetchingOptimistic = true\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.currentResult\n    })\n  }\n\n  private executeFetch(\n    fetchOptions?: ObserverFetchOptions,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  private updateStaleTimeout(): void {\n    this.clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.currentResult.dataUpdatedAt,\n      this.options.staleTime,\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  private computeRefetchInterval() {\n    return typeof this.options.refetchInterval === 'function'\n      ? this.options.refetchInterval(this.currentResult.data, this.currentQuery)\n      : this.options.refetchInterval ?? false\n  }\n\n  private updateRefetchInterval(nextInterval: number | false): void {\n    this.clearRefetchInterval()\n\n    this.currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.currentRefetchInterval) ||\n      this.currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.executeFetch()\n      }\n    }, this.currentRefetchInterval)\n  }\n\n  private updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval(this.computeRefetchInterval())\n  }\n\n  private clearStaleTimeout(): void {\n    if (this.staleTimeoutId) {\n      clearTimeout(this.staleTimeoutId)\n      this.staleTimeoutId = undefined\n    }\n  }\n\n  private clearRefetchInterval(): void {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId)\n      this.refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.currentQuery\n    const prevOptions = this.options\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.currentResultState\n    const prevResultOptions = this.currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.currentQueryInitialState\n    const prevQueryResult = queryChange\n      ? this.currentResult\n      : this.previousQueryResult\n\n    const { state } = query\n    let { dataUpdatedAt, error, errorUpdatedAt, fetchStatus, status } = state\n    let isPreviousData = false\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode)\n          ? 'fetching'\n          : 'paused'\n        if (!dataUpdatedAt) {\n          status = 'loading'\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle'\n      }\n    }\n\n    // Keep previous data if needed\n    if (\n      options.keepPreviousData &&\n      !state.dataUpdatedAt &&\n      prevQueryResult?.isSuccess &&\n      status !== 'error'\n    ) {\n      data = prevQueryResult.data\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt\n      status = prevQueryResult.status\n      isPreviousData = true\n    }\n    // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === this.selectFn\n      ) {\n        data = this.selectResult\n      } else {\n        try {\n          this.selectFn = options.select\n          data = options.select(state.data)\n          data = replaceData(prevResult?.data, data, options)\n          this.selectResult = data\n          this.selectError = null\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError)\n          }\n          this.selectError = selectError as TError\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = state.data as unknown as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'loading'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (options.placeholderData as PlaceholderDataFunction<TQueryData>)()\n            : options.placeholderData\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData)\n            this.selectError = null\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError)\n            }\n            this.selectError = selectError as TError\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = replaceData(prevResult?.data, placeholderData, options) as TData\n        isPlaceholderData = true\n      }\n    }\n\n    if (this.selectError) {\n      error = this.selectError as any\n      data = this.selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = fetchStatus === 'fetching'\n    const isLoading = status === 'loading'\n    const isError = status === 'error'\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus,\n      isLoading,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading && isFetching,\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      failureReason: state.fetchFailureReason,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isLoading,\n      isLoadingError: isError && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: isError && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.currentQuery, this.options)\n    this.currentResultState = this.currentQuery.state\n    this.currentResultOptions = this.options\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.currentResult = nextResult\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = { cache: true }\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n\n      if (\n        notifyOnChangeProps === 'all' ||\n        (!notifyOnChangeProps && !this.trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(notifyOnChangeProps ?? this.trackedProps)\n\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey]\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  private updateQuery(): void {\n    const query = this.client.getQueryCache().build(this.client, this.options)\n\n    if (query === this.currentQuery) {\n      return\n    }\n\n    const prevQuery = this.currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.currentQuery = query\n    this.currentQueryInitialState = query.state\n    this.previousQueryResult = this.currentResult\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(action: Action<TData, TError>): void {\n    const notifyOptions: NotifyOptions = {}\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = !action.manual\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true\n    }\n\n    this.updateResult(notifyOptions)\n\n    if (this.hasListeners()) {\n      this.updateTimers()\n    }\n  }\n\n  private notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        this.options.onSuccess?.(this.currentResult.data!)\n        this.options.onSettled?.(this.currentResult.data!, null)\n      } else if (notifyOptions.onError) {\n        this.options.onError?.(this.currentResult.error!)\n        this.options.onSettled?.(undefined, this.currentResult.error!)\n      }\n\n      // Then trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated',\n        })\n      }\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.dataUpdatedAt > 0 &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: typeof options['refetchOnMount'] &\n    typeof options['refetchOnWindowFocus'] &\n    typeof options['refetchOnReconnect'],\n) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}