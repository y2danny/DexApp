{"ast":null,"code":"import _objectSpread from \"/Users/mac/Desktop/Dex/dexStarter/dex/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/mac/Desktop/Dex/dexStarter/dex/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport { useSyncExternalStore } from './useSyncExternalStore.mjs';\nimport { parseMutationArgs, MutationObserver, notifyManager } from '@tanstack/query-core';\nimport { useQueryClient } from './QueryClientProvider.mjs';\nimport { shouldThrowError } from './utils.mjs';\nfunction useMutation(arg1, arg2, arg3) {\n  var options = parseMutationArgs(arg1, arg2, arg3);\n  var queryClient = useQueryClient({\n    context: options.context\n  });\n  var _React$useState = React.useState(function () {\n      return new MutationObserver(queryClient, options);\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    observer = _React$useState2[0];\n  React.useEffect(function () {\n    observer.setOptions(options);\n  }, [observer, options]);\n  var result = useSyncExternalStore(React.useCallback(function (onStoreChange) {\n    return observer.subscribe(notifyManager.batchCalls(onStoreChange));\n  }, [observer]), function () {\n    return observer.getCurrentResult();\n  }, function () {\n    return observer.getCurrentResult();\n  });\n  var mutate = React.useCallback(function (variables, mutateOptions) {\n    observer.mutate(variables, mutateOptions).catch(noop);\n  }, [observer]);\n  if (result.error && shouldThrowError(observer.options.useErrorBoundary, [result.error])) {\n    throw result.error;\n  }\n  return _objectSpread(_objectSpread({}, result), {}, {\n    mutate: mutate,\n    mutateAsync: result.mutate\n  });\n} // eslint-disable-next-line @typescript-eslint/no-empty-function\n\nfunction noop() {}\nexport { useMutation };","map":{"version":3,"mappings":";;;;;;;AAgEO,SAASA,WAAT,CAMLC,IANK,EAULC,IAVK,EAaLC,IAbK,EAcmD;EACxD,IAAMC,OAAO,GAAGC,iBAAiB,CAACJ,IAAD,EAAOC,IAAP,EAAaC,IAAb,CAAjC;EACA,IAAMG,WAAW,GAAGC,cAAc,CAAC;IAAEC,OAAO,EAAEJ,OAAO,CAACI;EAAnB,CAAD,CAAlC;EAEA,sBAAmBC,KAAK,CAACC,QAAN,CACjB;MAAA,OACE,IAAIC,gBAAJ,CACEL,WADF,EAEEF,OAFF,CAFe;IAAA,EAAnB;IAAA;IAAOQ,QAAD;EAQNH,KAAK,CAACI,SAAN,CAAgB,YAAM;IACpBD,QAAQ,CAACE,UAAT,CAAoBV,OAApB;EACD,CAFD,EAEG,CAACQ,QAAD,EAAWR,OAAX,CAFH;EAIA,IAAMW,MAAM,GAAGC,oBAAoB,CACjCP,KAAK,CAACQ,WAAN,CACGC,uBAAD;IAAA,OACEN,QAAQ,CAACO,SAAT,CAAmBC,aAAa,CAACC,UAAd,CAAyBH,aAAzB,CAAnB,CAFJ;EAAA,GAGE,CAACN,QAAD,CAHF,CADiC,EAMjC;IAAA,OAAMA,QAAQ,CAACU,gBAAT,EAN2B;EAAA,GAOjC;IAAA,OAAMV,QAAQ,CAACU,gBAAT,EAP2B;EAAA,EAAnC;EAUA,IAAMC,MAAM,GAAGd,KAAK,CAACQ,WAAN,CAGb,UAACO,SAAD,EAAYC,aAAZ,EAA8B;IAC5Bb,QAAQ,CAACW,MAAT,CAAgBC,SAAhB,EAA2BC,aAA3B,EAA0CC,KAA1C,CAAgDC,IAAhD;EACD,CALY,EAMb,CAACf,QAAD,CANa,CAAf;EASA,IACEG,MAAM,CAACa,KAAP,IACAC,gBAAgB,CAACjB,QAAQ,CAACR,OAAT,CAAiB0B,gBAAlB,EAAoC,CAACf,MAAM,CAACa,KAAR,CAApC,CAFlB,EAGE;IACA,MAAMb,MAAM,CAACa,KAAb;EACD;EAED,uCAAYb,MAAL;IAAaQ,MAAb,EAAaA,MAAb;IAAqBQ,WAAW,EAAEhB,MAAM,CAACQ;EAAAA;AACjD;;AAGD,SAASI,IAAT,GAAgB","names":["useMutation","arg1","arg2","arg3","options","parseMutationArgs","queryClient","useQueryClient","context","React","useState","MutationObserver","observer","useEffect","setOptions","result","useSyncExternalStore","useCallback","onStoreChange","subscribe","notifyManager","batchCalls","getCurrentResult","mutate","variables","mutateOptions","catch","noop","error","shouldThrowError","useErrorBoundary","mutateAsync"],"sources":["/Users/mac/Desktop/Dex/dexStarter/dex/node_modules/@tanstack/react-query/src/useMutation.ts"],"sourcesContent":["import * as React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport type { MutationFunction, MutationKey } from '@tanstack/query-core'\nimport {\n  notifyManager,\n  parseMutationArgs,\n  MutationObserver,\n} from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport { shouldThrowError } from './utils'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationFn: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  mutationFn?: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey' | 'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  arg1:\n    | MutationKey\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg2?:\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg3?: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const options = parseMutationArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient({ context: options.context })\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        queryClient,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.useErrorBoundary, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}